//自己的代码(超出时间限制)，使用暴力解法，时间复杂度O(n的平方)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int result = 0;
        for (int i = 0; i < s.size(); i++)
        {
            unordered_map<char, int> m_map;
            int length = 0;

            for (int j = i; j < s.size(); j++)
            {
                char str = s[j];
                auto ad = m_map.find(str);
                if (ad == m_map.end())
                {
                    m_map[s[j]]++;
                    length++;
                    if (j == s.size() - 1)
                    {
                        result = result > length ? result : length;
                        m_map.clear();
                        length = 0;
                    }
                }
                else
                {
                    result = result > length ? result : length;
                    m_map.clear();
                    length = 0;
                    continue;
                }
            }
        }
        return result;
    }
};




//使用滑动串口解决
/*
解题思路:
这种子串子数组问题，而且还满足窗口的右边界右移动就是加，左边界右移就是减的问题大概率就是滑动窗口。
[abc]abcbb
[]即为窗口
确认完滑动窗口后最关键的就是，移动左窗口的条件。以这题，题目的目的为无重复字符的最长子串，那么移动左窗口的条件就是子串中出现了重复字符，只要出现的重复字符就向右移动窗口，直到窗口中的字符重新满足条件。
那么新的问题出现了，如何判断窗口中是否存在重复字符——哈希表，哈希表可以快速判断是否存在重复字符，只要把窗口中的数字存入到哈希表中即可。当左窗口移动时把离开窗口的字符从哈希表中取出。
*/

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int result = 0,left=0,right=0;
        unordered_map<char, int> m_map;
        while(right<s.size())
        {
            if (m_map.count(s[right]) == 0)//m_map中没有找到，添加进m_map ，右边框向右移动一个位置
            {
                m_map[s[right]]++;
                right++;
            }
            else//m_map中找到重复值，左边框向右移动一位
            {
                m_map.erase(s[left]);
                left++;
            }
            result = max((int)m_map.size(), result);
        }
        return result;
    }
};
