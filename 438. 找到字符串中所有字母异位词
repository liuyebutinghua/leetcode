/*
438. 找到字符串中所有字母异位词
*/

//自己写的代码，暴力解法，没有通过，超出时间限制，总的思想就是把字符串取出来一一对比
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> result;
        result.clear();
        int p_num = p.size();

        if (p_num > s.size())
        {
            return result;
        }
        int left = 0,right= p_num- left;//[left,right)
        sort(p.begin(),p.end());

        while (left != s.size() - p_num+1)
        {
            string s_temp = s.substr(left, p_num);
            sort(s_temp.begin(), s_temp.end());
            int ret = s_temp.compare(p);
            if (0 == ret)
            {
                result.push_back(left);
            }
            left++;
        }
        return result;

    }
};



//leetcode上的好的解法    把对比操作从字符串直接的一一对比，转移到26个字母间的对比
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> result;
        result.clear();
        int p_num = p.size();
        if (p_num > s.size())
        {
            return result;
        }
        int right=0;//[left,right]
        int p1[26] = { 0 }, s1[26] = {0};

        for (auto& str : p)
        {
            p1[abs(str - 'a')]++;
        }
        while (right != s.size())
        {
            bool zhen = true;
            if (right > p_num - 1)
            {
                s1[s[right] - 'a']++;
                s1[s[right - p_num] - 'a']--;
            }
            else
            {
                s1[s[right] - 'a']++;
            }

            for (int i = 0; i < 26; i++)
            {
                if (p1[i] != s1[i])
                {
                    zhen = false;
                }
            }
            if (zhen == true)
            {
                result.push_back(right - p_num+1);
            }

            right++;
            
        }
        return result;

    }
};


